import { FileLoader, Loader } from "three";


enum ValueType {
  Uint8,
  Int8,
  Uint16,
  Int16,
  Uint32,
  Int32,
  Float32,
}

interface DataDescription {
  label?: string;
  type: ValueType | DataDescription[];
  length?: number;
  string?: boolean;
}

export type Vector3 = { x: number; y: number; z: number };
export type Color = { r: number; g: number; b: number };
export type Matrix = [
  number,
  number,
  number,
  number,

  number,
  number,
  number,
  number,

  number,
  number,
  number,
  number
];

const BYTE_SIZES = {
  [ValueType.Uint8]: 1,
  [ValueType.Int8]: 1,
  [ValueType.Uint16]: 2,
  [ValueType.Int16]: 2,
  [ValueType.Uint32]: 4,
  [ValueType.Int32]: 4,
  [ValueType.Float32]: 4,
};

const MAIN_HEADER_SIZE_BYTE = 802;
const SECTION_HEADER_SIZE_BYTE = 28;
const LITTLE_ENDIAN = true;

const TS_NORMALS = [
  { x: 0.198492005467415, y: -0.714193999767303, z: 0.671213984489441 },
  { x: 0.584393978118897, y: -0.765359997749329, z: 0.269643008708954 },
  { x: 0.0969879999756813, y: -0.994458973407745, z: -0.0405460000038147 },
  { x: -0.0919139981269836, y: -0.814786970615387, z: -0.572427988052368 },
  { x: -0.572709977626801, y: -0.801639020442963, z: -0.171400994062424 },
  { x: -0.30299898982048, y: -0.881331026554108, z: 0.362556993961334 },
  { x: -0.348971992731094, y: -0.470697999000549, z: 0.810347020626068 },
  { x: 0.938672006130218, y: -0.328767001628876, z: 0.103961996734142 },
  { x: 0.587669014930725, y: -0.741375982761383, z: -0.32404699921608 },
  { x: 0.340460985898972, y: -0.492646992206574, z: -0.800864994525909 },
  { x: -0.590147018432617, y: -0.456988990306854, z: -0.665498018264771 },
  { x: -0.803001999855042, y: -0.506072998046875, z: 0.314767003059387 },
  { x: 0.151076003909111, y: -0.176550000905991, z: 0.972629010677338 },
  { x: 0.684235990047455, y: -0.262726992368698, z: 0.680290997028351 },
  { x: 0.827777028083801, y: -0.210482999682426, z: -0.520079016685486 },
  { x: -0.179001003503799, y: -0.207846999168396, z: -0.961643993854523 },
  { x: -0.937451004981995, y: -0.228401005268097, z: -0.262713998556137 },
  { x: -0.971301019191742, y: 0.0911249965429306, z: 0.219706997275352 },
  { x: -0.229975000023842, y: 0.306086987257004, z: 0.923807978630066 },
  { x: 0.970659971237183, y: 0.225866004824638, z: -0.0824889987707138 },
  { x: 0.696789979934692, y: 0.405288994312286, z: -0.591798007488251 },
  { x: 0.36660099029541, y: 0.0971110016107559, z: -0.925296008586884 },
  { x: -0.687775015830994, y: 0.172828003764153, z: -0.705051004886627 },
  { x: -0.680366992950439, y: -0.0263049993664026, z: 0.732400000095367 },
  { x: 0.37458199262619, y: 0.358310997486114, z: 0.855162024497986 },
  { x: 0.836480021476746, y: 0.276704996824265, z: 0.473006010055542 },
  { x: 0.654111981391907, y: 0.750072002410889, z: -0.0976170003414154 },
  { x: -0.153724998235703, y: 0.398658007383347, z: -0.904124021530151 },
  { x: -0.858089983463287, y: 0.467732012271881, z: -0.211915999650955 },
  { x: -0.67440801858902, y: 0.543090999126434, z: 0.500226974487305 },
  { x: -0.110248997807503, y: 0.8038409948349, z: 0.584538996219635 },
  { x: 0.454643994569778, y: 0.775888979434967, z: 0.437373012304306 },
  { x: 0.0833180025219917, y: 0.995618999004364, z: -0.0424409992992878 },
  { x: 0.220131993293762, y: 0.772028028964996, z: -0.596251010894775 },
  { x: -0.396977007389069, y: 0.765448987483978, z: -0.50645500421524 },
  { x: -0.478473991155624, y: 0.875262022018433, z: 0.0705690011382103 },
];

const RA2_NORMALS = [
  { x: -0.359620988368988, y: -0.770317018032074, z: 0.526578009128571 },
  { x: 0.43598398566246, y: 0.887283980846405, z: 0.150481998920441 },
  { x: 0.738255023956299, y: -0.532374024391174, z: 0.414195001125336 },
  { x: 0.916248977184296, y: -0.393498003482819, z: 0.0751520022749901 },
  { x: 0.930736005306244, y: -0.183792993426323, z: -0.316148996353149 },
  { x: 0.623333990573883, y: -0.112510003149509, z: -0.773819029331207 },
  { x: 0.428537011146545, y: -0.0695680007338524, z: -0.900842010974884 },
  { x: -0.010971000418067, y: 0.0446650013327599, z: -0.998942017555237 },
  { x: -0.157670006155968, y: -0.123323999345303, z: -0.979761004447937 },
  { x: -0.362370997667313, y: -0.195620000362396, z: -0.911274015903473 },
  { x: -0.720941007137299, y: -0.301301002502441, z: -0.624068975448608 },
  { x: -0.809345006942749, y: -0.498751997947693, z: -0.310173004865646 },
  { x: -0.815819025039673, y: -0.559414029121399, z: 0.146613001823425 },
  { x: -0.694356024265289, y: -0.0668879970908165, z: -0.716516017913818 },
  { x: -0.114202000200748, y: -0.856136977672577, z: 0.503971993923187 },
  { x: 0.872627019882202, y: -0.176210999488831, z: 0.455491006374359 },
  { x: -0.114372998476028, y: -0.993425011634827, z: -0.00500999996438622 },
  { x: -0.32770100235939, y: -0.938965022563934, z: -0.104675002396107 },
  { x: 0.752588987350464, y: -0.345755994319916, z: 0.560411989688873 },
  { x: 0.821627974510193, y: -0.566796004772186, z: -0.0605759993195534 },
  { x: 0.797007024288178, y: -0.52284699678421, z: -0.302341014146805 },
  { x: 0.670740008354187, y: -0.314862996339798, z: -0.671543002128601 },
  { x: -0.128356993198395, y: 0.614504992961884, z: -0.778401017189026 },
  { x: 0.278382003307343, y: -0.261985003948212, z: -0.924049973487854 },
  { x: -0.550490975379944, y: -0.455278009176254, z: -0.699773013591766 },
  { x: -0.517189025878906, y: -0.640007972717285, z: -0.568247973918915 },
  { x: -0.932864010334015, y: -0.356142997741699, z: 0.0540979988873005 },
  { x: 0.572893023490906, y: -0.31088799238205, z: 0.758382022380829 },
  { x: 0.305025994777679, y: -0.952337026596069, z: 0.00362000009045005 },
  { x: -0.986886024475098, y: -0.149510994553566, z: -0.0608499981462956 },
  { x: 0.0454780012369156, y: -0.770982980728149, z: 0.635230004787445 },
  { x: 0.241309002041817, y: -0.818287014961243, z: 0.521704971790314 },
  { x: 0.635424971580505, y: -0.723640978336334, z: 0.269403994083405 },
  { x: 0.672753989696503, y: -0.73845499753952, z: 0.0456760004162788 },
  { x: 0.674656987190247, y: -0.715718984603882, z: -0.180510997772217 },
  { x: 0.636640012264252, y: -0.661041975021362, z: -0.397130995988846 },
  { x: 0.472514986991882, y: -0.687038004398346, z: -0.552003979682922 },
  { x: 0.0830899998545647, y: -0.629960000514984, z: -0.772170007228851 },
  { x: -0.119533002376556, y: -0.732840001583099, z: -0.669818997383118 },
  { x: -0.318444013595581, y: -0.77878201007843, z: -0.540454983711243 },
  { x: -0.522789001464844, y: -0.759993970394135, z: -0.386135011911392 },
  { x: -0.688566982746124, y: -0.676394999027252, z: -0.26146599650383 },
  { x: -0.696102976799011, y: -0.717679977416992, z: -0.0194119997322559 },
  { x: -0.481844007968903, y: -0.821992993354797, z: 0.303568989038467 },
  { x: -0.195129007101059, y: -0.704900026321411, z: 0.681939005851746 },
  { x: -0.116562001407146, y: -0.962518990039825, z: -0.244889006018639 },
  { x: -0.0229790005832911, y: -0.598546028137207, z: 0.800759017467499 },
  { x: 0.0955839976668358, y: -0.923991024494171, z: -0.370274990797043 },
  { x: -0.326577991247177, y: -0.885439991950989, z: -0.330671012401581 },
  { x: -0.527579009532928, y: -0.833679020404816, z: -0.163220003247261 },
  { x: -0.313145995140076, y: -0.941256999969482, z: 0.126389995217323 },
  { x: -0.272226005792618, y: -0.896498024463654, z: 0.349548012018204 },
  { x: -0.0858250036835671, y: -0.966992020606995, z: 0.239917993545532 },
  { x: 0.0815370008349419, y: -0.916837990283966, z: 0.390845000743866 },
  { x: 0.268696993589401, y: -0.928785026073456, z: 0.2552669942379 },
  { x: 0.480437994003296, y: -0.864749014377594, z: 0.146245002746582 },
  { x: 0.478455990552902, y: -0.815348982810974, z: -0.326016008853912 },
  { x: -0.112519003450871, y: -0.875635981559753, z: -0.46968200802803 },
  { x: -0.258520007133484, y: -0.513150990009308, z: 0.818440020084381 },
  { x: 0.292237997055054, y: -0.830433011054993, z: -0.474317997694015 },
  { x: 0.395841985940933, y: -0.486371010541916, z: 0.778943002223969 },
  { x: 0.39377298951149, y: -0.674870014190674, z: 0.624094009399414 },
  { x: 0.203833997249603, y: -0.639953017234802, z: 0.740885972976685 },
  { x: 0.565768003463745, y: -0.670297026634216, z: 0.480217009782791 },
  { x: 0.424535006284714, y: -0.821377992630005, z: 0.380930006504059 },
  { x: 0.501124024391174, y: -0.860318005084991, z: -0.0934220030903816 },
  { x: 0.296198010444641, y: -0.925387024879456, z: -0.236485004425049 },
  { x: 0.0939590036869049, y: -0.986849009990692, z: -0.131531000137329 },
  { x: 0.29577699303627, y: -0.484005987644196, z: -0.823562026023865 },
  { x: -0.624303996562958, y: -0.486663997173309, z: 0.611065983772278 },
  { x: -0.520330011844635, y: -0.851132988929748, z: 0.0694959983229637 },
  { x: -0.664879024028778, y: -0.711775004863739, z: 0.226521998643875 },
  { x: -0.568903982639313, y: -0.673956990242004, z: 0.471307992935181 },
  { x: -0.74262398481369, y: -0.545560002326965, z: 0.38842499256134 },
  { x: -0.480729013681412, y: -0.393384993076324, z: 0.783675014972687 },
  { x: 0.135675996541977, y: -0.235348999500275, z: 0.962393999099731 },
  { x: 0.172033995389938, y: -0.449405997991562, z: 0.876607000827789 },
  { x: 0.589793026447296, y: -0.500940978527069, z: 0.633405029773712 },
  { x: 0.800657987594605, y: -0.570720970630646, z: 0.182275995612144 },
  { x: 0.764133989810944, y: 0.620297014713287, z: 0.177002996206284 },
  { x: 0.675514996051788, y: -0.497720986604691, z: -0.544016003608704 },
  { x: 0.286466985940933, y: -0.675642013549805, z: -0.679296970367432 },
  { x: 0.0913690030574799, y: -0.801928997039795, z: -0.590390980243683 },
  { x: -0.133123993873596, y: -0.550189018249512, z: -0.824360013008118 },
  { x: -0.334542006254196, y: -0.612960994243622, z: -0.715794026851654 },
  { x: -0.8924840092659, y: 0.416049003601074, z: 0.174285992980003 },
  { x: -0.837122976779938, y: -0.54075300693512, z: -0.0825280025601387 },
  { x: -0.88087397813797, y: -0.379189014434814, z: 0.283331006765366 },
  { x: -0.42662701010704, y: -0.601817011833191, z: 0.675134003162384 },
  { x: -0.512335002422333, y: -0.16015599668026, z: 0.843720018863678 },
  { x: -0.0985559970140457, y: -0.187519997358322, z: 0.977303981781006 },
  { x: 0.52267199754715, y: -0.102946996688843, z: 0.84629499912262 },
  { x: 0.721324980258942, y: -0.145501002669334, z: 0.677141010761261 },
  { x: 0.870891988277435, y: -0.372193992137909, z: 0.320964992046356 },
  { x: 0.911532998085022, y: -0.37023600935936, z: -0.178977996110916 },
  { x: 0.826700985431671, y: -0.341473996639252, z: -0.447169005870819 },
  { x: 0.496327996253967, y: -0.50908100605011, z: -0.703203022480011 },
  { x: 0.0635629966855049, y: -0.202674001455307, z: -0.977181017398834 },
  { x: -0.412937998771667, y: 0.241455003619194, z: -0.878170013427734 },
  { x: -0.358550012111664, y: -0.415728002786636, z: -0.835830986499786 },
  { x: -0.693432986736298, y: -0.519591987133026, z: -0.499173998832703 },
  { x: -0.923753023147583, y: -0.333225011825562, z: -0.188788995146751 },
  { x: -0.969361007213593, y: -0.152896001935005, z: 0.19225400686264 },
  { x: -0.783906996250153, y: -0.345391988754272, z: 0.515940010547638 },
  { x: -0.300951987504959, y: -0.297870993614197, z: 0.90592497587204 },
  { x: -0.127746000885963, y: 0.0371069982647896, z: 0.991111993789673 },
  { x: 0.0984240025281906, y: -0.0043830000795424, z: 0.995135009288788 },
  { x: 0.646277010440826, y: 0.0673670023679733, z: 0.760123014450073 },
  { x: 0.95958000421524, y: -0.192590996623039, z: 0.205220997333527 },
  { x: 0.979512989521027, y: -0.196790993213654, z: -0.0427500009536743 },
  { x: 0.898926973342895, y: 0.00849200040102005, z: -0.438017010688782 },
  { x: 0.480785012245178, y: -0.305238991975784, z: -0.821994006633759 },
  { x: 0.0817100033164024, y: -0.428337007761002, z: -0.899917006492615 },
  { x: -0.144618004560471, y: -0.347095996141434, z: -0.926612019538879 },
  { x: -0.557792007923126, y: -0.242838993668556, z: -0.79365998506546 },
  { x: -0.847778975963593, y: -0.308557987213135, z: -0.431349992752075 },
  { x: -0.964999973773956, y: 0.262192994356155, z: -0.00549199990928173 },
  { x: -0.804026007652283, y: -0.0889400020241737, z: 0.587904989719391 },
  { x: -0.667685985565186, y: -0.254765003919601, z: 0.699492990970612 },
  { x: 0.35979500412941, y: -0.282290995121002, z: 0.889303028583527 },
  { x: 0.197036996483803, y: 0.592671990394592, z: 0.780972003936768 },
  { x: 0.506695985794067, y: 0.687556982040405, z: 0.520120978355408 },
  { x: 0.693961024284363, y: 0.59605997800827, z: 0.403894990682602 },
  { x: 0.899236023426056, y: 0.409090012311935, z: -0.154982998967171 },
  { x: 0.537168025970459, y: 0.528542995452881, z: -0.65733802318573 },
  { x: 0.334091007709503, y: 0.57582700252533, z: -0.746195018291473 },
  { x: -0.0491439998149872, y: 0.77911502122879, z: -0.624952018260956 },
  { x: -0.254714995622635, y: 0.913185000419617, z: 0.318141013383865 },
  { x: 0.405294001102447, y: 0.725751996040344, z: -0.555896997451782 },
  { x: 0.0994059965014458, y: 0.599160015583038, z: -0.794434010982513 },
  { x: -0.689463019371033, y: 0.3384949862957, z: -0.64036101102829 },
  { x: -0.734094977378845, y: 0.667119979858398, z: -0.126712992787361 },
  { x: -0.780816972255707, y: 0.615795016288757, z: 0.105457000434399 },
  { x: -0.480915993452072, y: 0.776054978370666, z: 0.407992988824844 },
  { x: -0.545120000839233, y: 0.468647003173828, z: 0.69513601064682 },
  { x: -0.00648899981752038, y: 0.229908004403114, z: 0.973191022872925 },
  { x: 0.31750899553299, y: -0.0507990010082722, z: 0.946893990039825 },
  { x: 0.825612008571625, y: 0.0271829999983311, z: 0.563583016395569 },
  { x: 0.945423007011414, y: 0.00694900006055832, z: 0.325773000717163 },
  { x: 0.985096991062164, y: -0.00781499966979027, z: -0.171820998191834 },
  { x: 0.739938974380493, y: 0.0547689981758594, z: -0.670440971851349 },
  { x: 0.554961979389191, y: 0.121321998536587, z: -0.822980999946594 },
  { x: 0.117857001721859, y: 0.229306995868683, z: -0.96619302034378 },
  { x: -0.294703990221024, y: 0.0589450001716614, z: -0.953769028186798 },
  { x: -0.50272798538208, y: -0.0100149996578693, z: -0.864386975765228 },
  { x: -0.842006027698517, y: -0.0973659977316856, z: -0.530609011650085 },
  { x: -0.984075009822845, y: 0.071772001683712, z: -0.16261799633503 },
  { x: -0.996011018753052, y: 0.0364390015602112, z: 0.081446997821331 },
  { x: -0.665962994098663, y: 0.000761999981477857, z: 0.745984017848968 },
  { x: -0.329268991947174, y: -0.0641060024499893, z: 0.942057013511658 },
  { x: -0.2810899913311, y: 0.19480299949646, z: 0.939701974391937 },
  { x: 0.550670027732849, y: 0.319362998008728, z: 0.771214008331299 },
  { x: 0.730690002441406, y: 0.234020993113518, z: 0.641348004341126 },
  { x: 0.996690988540649, y: 0.00987899955362082, z: 0.0806820020079613 },
  { x: 0.976643025875092, y: 0.209725007414818, z: -0.0467250011861324 },
  { x: 0.821000993251801, y: 0.209562003612518, z: -0.531076014041901 },
  { x: 0.65599000453949, y: 0.292434990406036, z: -0.695815026760101 },
  { x: 0.21670900285244, y: -0.0149130001664162, z: -0.97612202167511 },
  { x: -0.144128993153572, y: 0.233313992619514, z: -0.961660981178284 },
  { x: -0.613646984100342, y: 0.165298998355865, z: -0.77208399772644 },
  { x: -0.836059987545013, y: 0.314426004886627, z: -0.449600011110306 },
  { x: -0.914615988731384, y: 0.0962470024824142, z: -0.392699986696243 },
  { x: -0.919470012187958, y: 0.0448900014162064, z: 0.390588998794556 },
  { x: -0.799197971820831, y: 0.148127004504204, z: 0.582529008388519 },
  { x: -0.489811986684799, y: 0.0968639999628067, z: 0.866430997848511 },
  { x: 0.11149799823761, y: 0.411449998617172, z: 0.904586970806122 },
  { x: 0.232329994440079, y: 0.191806003451347, z: 0.953536987304687 },
  { x: 0.770802974700928, y: 0.398176997900009, z: 0.497310996055603 },
  { x: 0.956319987773895, y: 0.218611001968384, z: 0.194066002964973 },
  { x: 0.882275998592377, y: 0.206797003746033, z: 0.422876000404358 },
  { x: 0.849565982818604, y: 0.372173994779587, z: -0.373796999454498 },
  { x: 0.714022994041443, y: 0.452199995517731, z: -0.534497022628784 },
  { x: 0.237159997224808, y: 0.407597988843918, z: -0.881826996803284 },
  { x: -0.0140690002590418, y: 0.425289005041122, z: -0.904947996139526 },
  { x: -0.512817025184631, y: 0.414458006620407, z: -0.751827001571655 },
  { x: -0.697916984558105, y: 0.511758029460907, z: -0.50101500749588 },
  { x: -0.925922989845276, y: 0.295554995536804, z: -0.235190004110336 },
  { x: -0.953939974308014, y: 0.193819001317024, z: 0.228982999920845 },
  { x: -0.634898006916046, y: 0.241062000393867, z: 0.734025001525879 },
  { x: -0.0632530003786087, y: -0.401315987110138, z: 0.913752973079681 },
  { x: -0.161486998200417, y: 0.391874998807907, z: 0.905735015869141 },
  { x: 0.342445999383926, y: 0.380748987197876, z: 0.858929991722107 },
  { x: 0.60758101940155, y: 0.490776985883713, z: 0.624486029148102 },
  { x: 0.857478976249695, y: 0.425507992506027, z: 0.289263993501663 },
  { x: 0.902168989181519, y: 0.425671011209488, z: 0.0699680000543594 },
  { x: 0.940699994564056, y: 0.182164996862411, z: -0.28617998957634 },
  { x: 0.805118978023529, y: -0.149308994412422, z: -0.574012994766235 },
  { x: 0.0997179970145225, y: -0.988776028156281, z: 0.111258000135422 },
  { x: -0.944227993488312, y: -0.123159997165203, z: -0.305393010377884 },
  { x: -0.78957599401474, y: 0.123162999749184, z: -0.601166009902954 },
  { x: -0.812139987945557, y: 0.505918979644775, z: -0.290645003318787 },
  { x: -0.877162992954254, y: 0.475784987211227, z: -0.064920000731945 },
  { x: -0.862215995788574, y: 0.299789011478424, z: 0.408300995826721 },
  { x: -0.725566029548645, y: 0.391263991594315, z: 0.566097021102905 },
  { x: -0.427386999130249, y: 0.335869014263153, z: 0.839363992214203 },
  { x: -0.0413050018250942, y: 0.572448015213013, z: 0.818899989128113 },
  { x: 0.414997011423111, y: 0.556496977806091, z: 0.719784021377564 },
  { x: 0.450269997119904, y: 0.140659004449844, z: 0.881744027137756 },
  { x: -0.898220002651215, y: -0.178151994943619, z: 0.40182301402092 },
  { x: 0.791343986988068, y: 0.608980000019074, z: -0.0540199987590313 },
  { x: 0.763993978500366, y: 0.574464976787567, z: -0.293774008750916 },
  { x: 0.610346972942352, y: 0.651350975036621, z: -0.450798004865646 },
  { x: 0.186693996191025, y: 0.746873021125793, z: -0.638221025466919 },
  { x: -0.257126986980438, y: 0.414707988500595, z: -0.872870028018951 },
  { x: -0.521709978580475, y: 0.618827998638153, z: -0.587257027626038 },
  { x: -0.641973972320557, y: 0.680290997028351, z: -0.353657990694046 },
  { x: -0.611272990703583, y: 0.79032301902771, z: 0.0416489988565445 },
  { x: -0.779182970523834, y: 0.521086990833282, z: 0.348342001438141 },
  { x: -0.622440993785858, y: 0.602825999259949, z: 0.499166995286942 },
  { x: -0.3038310110569, y: 0.53250002861023, z: 0.790018975734711 },
  { x: 0.0607330016791821, y: 0.748701989650726, z: 0.660117983818054 },
  { x: 0.29416099190712, y: 0.739960014820099, z: 0.604920983314514 },
  { x: 0.379346013069153, y: 0.841032028198242, z: 0.38569700717926 },
  { x: 0.207875996828079, y: 0.948332011699677, z: 0.239693000912666 },
  { x: 0.258531987667084, y: 0.965919971466065, z: 0.012622999958694 },
  { x: 0.457147002220154, y: 0.883687973022461, z: -0.100556999444962 },
  { x: 0.628588020801544, y: 0.776319026947021, z: 0.0469669997692108 },
  { x: -0.445405006408691, y: 0.785097002983093, z: -0.430391013622284 },
  { x: -0.196227997541428, y: 0.879139006137848, z: -0.434291005134583 },
  { x: -0.33686700463295, y: 0.905902028083801, z: -0.256637006998062 },
  { x: -0.158910006284714, y: 0.978514015674591, z: -0.131372004747391 },
  { x: -0.208766996860504, y: 0.972591996192932, z: 0.102379001677036 },
  { x: -0.450129002332687, y: 0.871258020401001, z: 0.195686995983124 },
  { x: -0.42314800620079, y: 0.653770983219147, z: 0.627318978309631 },
  { x: -0.171582996845245, y: 0.70568197965622, z: 0.687439024448395 },
  { x: -0.021254999563098, y: 0.960946023464203, z: 0.275920003652573 },
  { x: 0.157465994358063, y: 0.874177992343903, z: 0.459367007017136 },
  { x: 0.583184003829956, y: 0.760555982589722, z: 0.285394996404648 },
  { x: 0.460303008556366, y: 0.358460992574692, z: -0.812174022197723 },
  { x: 0.641223013401032, y: 0.743698000907898, z: -0.189068004488945 },
  { x: 0.476480007171631, y: 0.811251997947693, z: -0.338874995708466 },
  { x: 0.347185999155045, y: 0.176726996898651, z: -0.920993983745575 },
  { x: 0.024465000256896, y: 0.998874008655548, z: 0.0406389981508255 },
  { x: -0.353747010231018, y: 0.573189973831177, z: -0.739131987094879 },
  { x: -0.286615014076233, y: 0.744059979915619, z: -0.603511989116669 },
  { x: -0.547058999538422, y: 0.815554022789001, z: -0.188675999641418 },
  { x: -0.397819995880127, y: 0.917093992233276, z: -0.0260450001806021 },
  { x: -0.649040997028351, y: 0.712023019790649, z: 0.267897009849548 },
  { x: -0.28489100933075, y: 0.806385993957519, z: 0.518245995044708 },
  { x: -0.0665329992771149, y: 0.867224991321564, z: 0.493450999259949 },
  { x: 0.140250995755196, y: 0.934143006801605, z: -0.328188002109528 },
  { x: 0.140250995755196, y: 0.934143006801605, z: -0.328188002109528 },
  { x: 0.140250995755196, y: 0.934143006801605, z: -0.328188002109528 },
  { x: 0.140250995755196, y: 0.934143006801605, z: -0.328188002109528 },
];

const getValue = (dataView: DataView) => (type: ValueType) => {
  const getterMap = {
    [ValueType.Uint8]: (byteOffset: number) => dataView.getUint8(byteOffset),
    [ValueType.Int8]: (byteOffset: number) => dataView.getInt8(byteOffset),
    [ValueType.Uint16]: (byteOffset: number) =>
      dataView.getUint16(byteOffset, LITTLE_ENDIAN),
    [ValueType.Int16]: (byteOffset: number) =>
      dataView.getInt16(byteOffset, LITTLE_ENDIAN),
    [ValueType.Uint32]: (byteOffset: number) =>
      dataView.getUint32(byteOffset, LITTLE_ENDIAN),
    [ValueType.Int32]: (byteOffset: number) =>
      dataView.getInt32(byteOffset, LITTLE_ENDIAN),
    [ValueType.Float32]: (byteOffset: number) =>
      dataView.getFloat32(byteOffset, LITTLE_ENDIAN),
  };

  return getterMap[type];
};

function bufferToString(array: Uint8Array) {
  const utf8Decoder = new TextDecoder();

  const zeroIndex = array.findIndex((value) => value === 0);

  return utf8Decoder.decode(
    array.slice(0, zeroIndex !== -1 ? zeroIndex : array.length)
  );
}

function getTypeSize(value: ValueType | DataDescription[]) {
  if (Array.isArray(value)) {
    return value.reduce<number>(
      (sum, value) => (sum += getTypeSize(value.type) * (value.length || 1)),
      0
    );
  }

  return BYTE_SIZES[value];
}

function parse<T extends { [key: string]: unknown }>(
  buffer: ArrayBuffer,
  dataDescription: DataDescription[],
  byteOffset = 0
) {
  const dataView = new DataView(buffer, byteOffset);
  const getDataValue = getValue(dataView);

  const data = dataDescription.reduce((struct, value, index, data) => {
    const label = value.label || `unknown_${index}`;
    const localByteOffset = data
      .slice(0, index)
      .reduce(
        (sum, value) => (sum += getTypeSize(value.type) * (value.length || 1)),
        0
      );

    if (value.length) {
      if (value.string) {
        const array = new Uint8Array(
          buffer.slice(byteOffset + localByteOffset, byteOffset + value.length)
        );
        struct[label] = bufferToString(array);
      } else {
        const array = [];
        const size = getTypeSize(value.type);
        for (let i = 0; i < value.length; i++) {
          if (!Array.isArray(value.type)) {
            array.push(getDataValue(value.type)(localByteOffset + i * size));
          } else {
            array.push(
              parse(
                buffer,
                value.type,
                byteOffset + localByteOffset + i * getTypeSize(value.type)
              )
            );
          }
        }
        struct[label] = array;
      }
    } else if (!Array.isArray(value.type)) {
      struct[label] = getDataValue(value.type)(localByteOffset);
    } else {
      struct[label] = parse(buffer, value.type, byteOffset + localByteOffset);
    }

    return struct;
  }, {});

  return data as T;
}

type MainHeader = {
  fileType: string;
  numSections: number;
  numberSectionsBis: number;
  bodySize: number;
  startPaletteRemap: number;
  endPaletteRemap: number;
  palette: number[];
};

function parseMainHeader(buffer: ArrayBuffer) {
  const headerStructure: DataDescription[] = [
    { label: "fileType", type: ValueType.Uint8, length: 16, string: true },
    { type: ValueType.Uint32 },
    { label: "numSections", type: ValueType.Uint32 },
    { label: "numSectionsBis", type: ValueType.Uint32 },
    { label: "bodySize", type: ValueType.Uint32 },
    { label: "startPaletteRemap", type: ValueType.Uint8 },
    { label: "endPaletteRemap", type: ValueType.Uint8 },
    { label: "palette", type: ValueType.Uint8, length: 256 * 3 },
  ];

  return parse<MainHeader>(buffer, headerStructure);
}

function parseSectionBody(
  buffer: ArrayBuffer,
  tailer: SectionTailer,
  byteOffset: number
) {
  const voxels: Array<{
    position: Vector3;
    colour: number;
    normal: number;
  }> = [];
  const baseOffset =
    MAIN_HEADER_SIZE_BYTE + byteOffset + tailer.spanStartOffset;

  const nSpans = tailer.width * tailer.depth;

  const spansAddressesStructure: DataDescription[] = [
    {
      label: "spanStart",
      type: ValueType.Int32,
      length: nSpans,
    },
    {
      label: "spanEnd",
      type: ValueType.Int32,
      length: nSpans,
    },
  ];

  const spansAddresses = parse<{
    spanStart: number[];
    spanEnd: number[];
  }>(buffer, spansAddressesStructure, baseOffset);

  let offset = baseOffset + getTypeSize(spansAddressesStructure);
  const origOffset = offset;

  const dataView = new DataView(buffer);
  for (let i = 0; i < nSpans; i++) {
    if (
      spansAddresses.spanStart[i] === -1 ||
      spansAddresses.spanEnd[i] === -1
    ) {
      continue;
    }

    offset = origOffset + spansAddresses.spanStart[i];

    let y = 0;
    while (y < tailer.height) {
      const skip = dataView.getUint8(offset);

      offset += 1;
      y += skip;

      if (y >= tailer.height) break;

      const numVoxels = dataView.getUint8(offset);
      offset += 1;

      const voxelDataStructure = [
        {
          label: "data",
          length: numVoxels,
          type: [
            { label: "colour", type: ValueType.Uint8 },
            { label: "normal", type: ValueType.Uint8 },
          ],
        },
        { label: "numVoxels", type: ValueType.Uint8 },
      ];
      const data = parse<{
        data: Array<{ colour: number; normal: number }>;
        numVoxels: number;
      }>(buffer, voxelDataStructure, offset);

      data.data.forEach((voxel, index) =>
        voxels.push({
          position: {
            x: i % tailer.depth,
            y: y + index,
            z: Math.floor(i / tailer.depth),
          },
          colour: voxel.colour,
          normal: voxel.normal,
        })
      );

      if (numVoxels !== data.numVoxels) {
        throw Error(
          `${offset} (${offset.toString(16)}): ${numVoxels} != ${
            data.numVoxels
          }`
        );
      }

      y += numVoxels;
      offset += getTypeSize(voxelDataStructure);
    }

    offset += 2; // Unknown 2 bytes
  }

  return voxels;
}

type SectionTailer = {
  spanStartOffset: number;
  spanEndOffset: number;
  spanDataOffset: number;
  scale: number;
  transformMatrix: Matrix;
  minBound: number[];
  maxBound: number[];
  width: number;
  height: number;
  depth: number;
  normalType: number;
};

function parseSectionTailers(
  buffer: ArrayBuffer,
  count: number,
  bodySize: number
) {
  const tailersStructure: DataDescription[] = [
    {
      label: "tailers",
      length: count,
      type: [
        { label: "spanStartOffset", type: ValueType.Uint32 },
        { label: "spanEndOffset", type: ValueType.Uint32 },
        { label: "spanDataOffset", type: ValueType.Uint32 },
        { label: "scale", type: ValueType.Float32 },
        { label: "transformMatrix", type: ValueType.Float32, length: 12 },
        { label: "minBound", type: ValueType.Float32, length: 3 },
        { label: "maxBound", type: ValueType.Float32, length: 3 },
        { label: "depth", type: ValueType.Uint8 },
        { label: "width", type: ValueType.Uint8 },
        { label: "height", type: ValueType.Uint8 },
        {
          label: "normalType",
          type: ValueType.Uint8,
        } /* 2 == TS Normals, 4 == RA2 Normals */,
      ],
    },
  ];

  const parsed = parse<{
    tailers: SectionTailer[];
  }>(
    buffer,
    tailersStructure,
    MAIN_HEADER_SIZE_BYTE + count * SECTION_HEADER_SIZE_BYTE + bodySize
  );

  return parsed.tailers;
}

function parseSections(buffer: ArrayBuffer, tailers: SectionTailer[]) {
  return tailers.map((tailer) => {
    const voxels = parseSectionBody(
      buffer,
      tailer,
      tailers.length * SECTION_HEADER_SIZE_BYTE
    );
    const data = new Uint8Array(voxels.length * 5);
    voxels.forEach((voxel, i) => {
      if (voxel) {
        const i5 = i * 5;
        data[i5 + 0] = voxel.position.x;
        data[i5 + 1] = voxel.position.y;
        data[i5 + 2] = voxel.position.z;
        data[i5 + 3] = voxel.colour;
        data[i5 + 4] = voxel.normal;
      }
    });

    return {
      data,
      size: {
        x: tailer.width,
        y: tailer.height,
        z: tailer.depth,
      },
      scale: tailer.scale,
      minBounds: {
        x: tailer.minBound[1], // Inverse X and Z
        y: tailer.minBound[2], // Inverse Y and Z
        z: tailer.minBound[0],
      },
      maxBounds: {
        x: tailer.maxBound[1], // Inverse X and Z
        y: tailer.maxBound[2], // Inverse Y and Z
        z: tailer.maxBound[0],
      },
      normalPalette: tailer.normalType === 4 ? RA2_NORMALS : TS_NORMALS,
      transformMatrix: [
        tailer.transformMatrix[0],
        tailer.transformMatrix[1] * tailer.scale,
        tailer.transformMatrix[2] * tailer.scale,
        tailer.transformMatrix[7] * tailer.scale, // Inverse X and Z

        tailer.transformMatrix[4] * tailer.scale,
        tailer.transformMatrix[5],
        tailer.transformMatrix[6] * tailer.scale,
        tailer.transformMatrix[11] * tailer.scale, // Inverse Y and Z

        tailer.transformMatrix[8] * tailer.scale,
        tailer.transformMatrix[9] * tailer.scale,
        tailer.transformMatrix[10],
        tailer.transformMatrix[3] * tailer.scale, // Inverse Y and Z
      ] as Matrix,
    };
  });
}

export class VXLLoader extends Loader {
  load(
    url: string,
    onLoad: (data: ReturnType<VXLLoader["parse"]>) => void,
    onProgress?: () => void,
    onError?: (errorEvent: ErrorEvent) => void
  ) {
    const scope = this;

    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setResponseType("arraybuffer");
    loader.setRequestHeader(scope.requestHeader);
    loader.load(
      url,
      (buffer) => {
        try {
          onLoad(scope.parse(buffer as ArrayBuffer));
        } catch (e) {
          if (onError) {
            onError(e);
          } else {
            console.error(e);
          }

          scope.manager.itemError(url);
        }
      },
      onProgress,
      onError
    );
  }

  parse(buffer: ArrayBuffer) {
    const mainHeader = parseMainHeader(buffer);
    const sectionTailers = parseSectionTailers(
      buffer,
      mainHeader.numSections,
      mainHeader.bodySize
    );

    const palette: Color[] = [];
    for (let i = 0; i < mainHeader.palette.length; i += 3)
      palette.push({
        r: mainHeader.palette[i + 0],
        g: mainHeader.palette[i + 1],
        b: mainHeader.palette[i + 2],
      });

    return {
      palette,
      paletteRemap: {
        start: mainHeader.startPaletteRemap,
        end: mainHeader.endPaletteRemap,
      },
      sections: parseSections(buffer, sectionTailers),
    };
  }
}
